package instructions

import instructions.base.Instruction
import instructions.comparisons.*
import instructions.constants.*
import instructions.control.Goto
import instructions.control.LookUpSwitch
import instructions.control.TableSwitch
import instructions.conversions.*
import instructions.extended.GotoW
import instructions.extended.IfNonNull
import instructions.extended.IfNull
import instructions.extended.Wide
import instructions.loads.*
import instructions.math.*
import instructions.references.*
import instructions.stack.*
import instructions.stores.*

class InstructionFactory {
    companion object {
        fun newInstruction(opCode: Int) :Instruction{
            return when(opCode){
                0x00 -> Nop()
                0x01 -> AConstNull()
                0x02 -> IConstM1()
                0x03 -> IConst0()
                0x04 -> IConst1()
                0x05 -> IConst2()
                0x06 -> IConst3()
                0x07 -> IConst4()
                0x08 -> IConst5()
                0x09 -> LConst0()
                0x0a -> LConst1()
                0x0b -> FConst0()
                0x0c -> FConst1()
                0x0d -> FConst2()
                0x0e -> DConst0()
                0x0f -> DConst1()
                0x10 -> BIPush()
                0x11 -> SIPush()
                0x12 -> LDC()
                0x13 -> LDC_W()
                0x14 -> LDC2_W()
                0x15 -> ILoad()
                0x16 -> LLoad()
                0x17 -> FLoad()
                0x18 -> DLoad()
                0x19 -> ALoad()
                0x1a -> ILoad0()
                0x1b -> ILoad1()
                0x1c -> ILoad2()
                0x1d -> ILoad3()
                0x1e -> LLoad0()
                0x1f -> LLoad1()
                0x20 -> LLoad2()
                0x21 -> LLoad3()
                0x22 -> FLoad0()
                0x23 -> FLoad1()
                0x24 -> FLoad2()
                0x25 -> FLoad3()
                0x26 -> DLoad0()
                0x27 -> DLoad1()
                0x28 -> DLoad2()
                0x29 -> DLoad3()
                0x2a -> ALoad0()
                0x2b -> ALoad1()
                0x2c -> ALoad2()
                0x2d -> ALoad3()
                0x36 -> IStore()
                0x37 -> LStore()
                0x38 -> FStore()
                0x39 -> DStore()
                0x3a -> AStore()
                0x3b -> IStore0()
                0x3c -> IStore1()
                0x3d -> IStore2()
                0x3e -> IStore3()
                0x3f -> LStore0()
                0x40 -> LStore1()
                0x41 -> LStore2()
                0x42 -> LStore3()
                0x43 -> FStore0()
                0x44 -> FStore1()
                0x45 -> FStore2()
                0x46 -> FStore3()
                0x47 -> DStore0()
                0x48 -> DStore1()
                0x49 -> DStore2()
                0x4a -> DStore3()
                0x4b -> AStore0()
                0x4c -> AStore1()
                0x4d -> AStore2()
                0x4e -> AStore3()
                0x57 -> Pop()
                0x58 -> Pop2()
                0x59 -> Dup()
                0x5a -> DupX1()
                0x5b -> DupX2()
                0x5c -> Dup2()
                0x5d -> Dup2X1()
                0x5e -> Dup2X2()
                0x5f -> Swap()
                0x60 -> IAdd()
                0x61 -> LAdd()
                0x62 -> FAdd()
                0x63 -> DAdd()
                0x64 -> ISub()
                0x65 -> LSub()
                0x66 -> FSub()
                0x67 -> DSub()
                0x68 -> IMul()
                0x69 -> LMul()
                0x6a -> FMul()
                0x6b -> DMul()
                0x6c -> IDiv()
                0x6d -> LDiv()
                0x6e -> FDiv()
                0x6f -> DDiv()
                0x70 -> IRem()
                0x71 -> LRem()
                0x72 -> FRem()
                0x73 -> DRem()
                0x74 -> INeg()
                0x75 -> LNeg()
                0x76 -> FNeg()
                0x77 -> DNeg()
                0x78 -> IShl()
                0x79 -> LShl()
                0x7a -> IShr()
                0x7b -> LShr()
                0x7c -> IUShr()
                0x7d -> LUShr()
                0x7e -> IAnd()
                0x7f -> LAnd()
                0x80 -> IOr()
                0x81 -> LOr()
                0x82 -> IXor()
                0x83 -> LXor()
                0x84 -> IInc()
                0x85 -> I2L()
                0x86 -> I2F()
                0x87 -> I2D()
                0x88 -> L2I()
                0x89 -> L2F()
                0x8a -> L2D()
                0x8b -> F2I()
                0x8c -> F2L()
                0x8d -> F2D()
                0x8e -> D2I()
                0x8f -> D2L()
                0x90 -> D2F()
                0x91 -> I2B()
                0x92 -> I2C()
                0x93 -> I2S()
                0x94 -> LCmp()
                0x95 -> FCmpl()
                0x96 -> FCmpg()
                0x97 -> FCmpg()
                0x98 -> DCmpg()
                0x99 -> IFeq()
                0x9a -> IFne()
                0x9b -> IFlt()
                0x9c -> IFge()
                0x9d -> IFgt()
                0x9e -> IFle()
                0x9f -> IfICmpEq()
                0xa0 -> IfICmpNe()
                0xa1 -> IfICmpLt()
                0xa2 -> IfICmpGe()
                0xa3 -> IfICmpGt()
                0xa4 -> IfICmpLe()
                0xa5 -> IfAcmpEq()
                0xa6 -> IfAcmpNe()
                0xa7 -> Goto()
                0xaa -> TableSwitch()
                0xab -> LookUpSwitch()
                0xb2 -> GetStatic()
                0xb3 -> PutStatic()
                0xb4 -> GetField()
                0xb5 -> PutField()
                0xb6 -> Invokevirtual()
                0xb7 -> Invokespecial()
                0xbb -> New()
                0xc0 -> CheckCast()
                0xc1 -> InstanceOf()
                0xc4 -> Wide()
                0xc6 -> IfNull()
                0xc7 -> IfNonNull()
                0xc8 -> GotoW()
                else -> throw RuntimeException("Unsupported opcode: $opCode")
            }
        }
    }
}